name: Deploy Web Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - prod
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

env:
  SERVICE_NAME: web-app
  DEPLOY_ENV: ${{ github.event.inputs.environment || inputs.environment || 'test' }}

jobs:
  deploy:
    name: Deploy Web App
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || inputs.environment || 'test' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'app/package-lock.json'

    - name: Install dependencies
      run: |
        cd app
        npm ci

    - name: Clean environment files
      run: |
        cd app
        # Remove any local environment files that might interfere
        rm -f .env.local .env.development .env.production
        echo "Cleaned local environment files"

    - name: Create build-time environment file
      run: |
        cd app
        # Create .env.production for build time (NEXT_PUBLIC_ vars only)
        cat > .env.production << EOF
        NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ vars.GOOGLE_CLOUD_PROJECT }}
        NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ vars.GOOGLE_CLOUD_PROJECT }}.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ vars.GOOGLE_CLOUD_PROJECT }}.firebasestorage.app
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        NODE_ENV=production
        EOF

    - name: Create runtime environment configuration
      run: |
        cd app
        # Create .env.yaml for Cloud Run runtime (all vars)
        cat > .env.yaml << EOF
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: "${{ vars.GOOGLE_CLOUD_PROJECT }}"
        NEXT_PUBLIC_FIREBASE_API_KEY: "${{ secrets.FIREBASE_API_KEY }}"
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: "${{ vars.GOOGLE_CLOUD_PROJECT }}.firebaseapp.com"
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: "${{ vars.GOOGLE_CLOUD_PROJECT }}.firebasestorage.app"
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
        NEXT_PUBLIC_FIREBASE_APP_ID: "${{ secrets.FIREBASE_APP_ID }}"
        FIREBASE_PROJECT_ID: "${{ vars.GOOGLE_CLOUD_PROJECT }}"
        FIREBASE_CLIENT_EMAIL: "${{ secrets.FIREBASE_CLIENT_EMAIL }}"
        FIREBASE_PRIVATE_KEY: "${{ secrets.FIREBASE_PRIVATE_KEY }}"
        STRIPE_SECRET_KEY: "${{ secrets.STRIPE_SECRET_KEY }}"
        STRIPE_WEBHOOK_SECRET: "${{ secrets.STRIPE_WEBHOOK_SECRET }}"
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: "${{ secrets.STRIPE_PUBLISHABLE_KEY }}"
        EOF

    - name: Build application
      env:
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ vars.GOOGLE_CLOUD_PROJECT }}
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ vars.GOOGLE_CLOUD_PROJECT }}.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ vars.GOOGLE_CLOUD_PROJECT }}.firebasestorage.app
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        NODE_ENV: production
      run: |
        cd app
        echo "Building with production environment..."
        echo "Firebase Project: ${{ vars.GOOGLE_CLOUD_PROJECT }}"
        
        # Verify both env vars and file are available
        echo "Environment variables for build:"
        echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID is set: $([[ -n "$NEXT_PUBLIC_FIREBASE_PROJECT_ID" ]] && echo "YES" || echo "NO")"
        echo "NEXT_PUBLIC_FIREBASE_API_KEY is set: $([[ -n "$NEXT_PUBLIC_FIREBASE_API_KEY" ]] && echo "YES" || echo "NO")"
        
        echo "Checking .env.production file:"
        if [ -f .env.production ]; then
          echo ".env.production exists"
          grep "NEXT_PUBLIC_FIREBASE_PROJECT_ID" .env.production || echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID not in file"
        else
          echo ".env.production does not exist"
        fi
        
        # Build the application
        npm run build
        
        # Clean up build-time env file to prevent conflicts with runtime
        rm -f .env.production
        echo "Cleaned up build-time environment file"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ vars.GOOGLE_CLOUD_PROJECT }}

    - name: Deploy to Cloud Run
      run: |
        cd app
        
        echo "ðŸš€ Deploying Web Application..."
        echo "Service name: ${{ env.SERVICE_NAME }}"
        echo "Project: ${{ vars.GOOGLE_CLOUD_PROJECT }}"
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --source . \
          --platform managed \
          --region ${{ vars.GOOGLE_CLOUD_LOCATION }} \
          --allow-unauthenticated \
          --port 3000 \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances ${{ env.DEPLOY_ENV == 'prod' && '50' || '5' }} \
          --env-vars-file .env.yaml
